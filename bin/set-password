#! /usr/bin/env node

const validEmailRegex = /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
const API = require('../backend-api/api');
const config = require('config');
const EventEmitter = require('events').EventEmitter;

require('async')
    .autoInject({
        db: function(callback) {
            require('mongodb').MongoClient.connect(config.api.db, callback);
        },
        bus: function(callback) {
            var bus = new EventEmitter();
            bus.setMaxListeners(0);

            callback(null, bus);
        },
        api: function(db, bus, callback) {
            callback(null, new API(config.api, db, bus));
        },
        answers: function(callback) {
            var argv = require('minimist')(process.argv);

            var inquirer = require('inquirer');

            inquirer.prompt([{
                'name': 'email',
                'type': 'string',
                'message': 'What is the email of the user?',
                'default': argv.email,
                'validate': function(value) {
                    if (validEmailRegex.test(value)) return Promise.resolve(true);
                    return Promise.reject('invalid email');
                }
            }, {
                'name': 'password',
                'type': 'password',
                'message': 'What is the new password?',
                'default': argv.password,
                'validate': function(value) {
                    if (!value) return Promise.reject('Password is required');
                    if (value.length < 6) return Promise.reject('Password is too short (6 characters minumum)');
                    
                    return Promise.resolve(true);
                }
            }]).then(function(answers) {
                callback(null, answers);
            }, function(err) {
                callback(err || new Error());
            });
        },
        passwordChange: function(answers, api, callback) {
            api.users.findByTag(`email:${answers.email}`)
            .then((users) => {
               if (users.length !== 1) return callback(new Error('unable to find the user'));
               
               var userId = users[0]._id;
               
               return api.users.setPassword(userId, answers.password);
            })
            .then(
                (result) => callback(null, result || true),
                (err) => callback(err || new Error('unable to change password'))
            );
        }
    }, function(err, results) {
        if (err) {
            console.error(err.toString());
            return process.exit(-1);
        }
        process.stdout.write(require('js-yaml').safeDump(results.passwordChange));

        return process.exit();
    });
