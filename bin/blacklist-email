#! /usr/bin/env node

const validEmailRegex = /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
const API = require('../backend-api/api');
const config = require('config');
const EventEmitter = require('events').EventEmitter;

require('async')
    .autoInject({
        db: function(callback) {
            require('mongodb').MongoClient.connect(config.api.db, callback);
        },
        bus: function(callback) {
            var bus = new EventEmitter();
            bus.setMaxListeners(0);

            callback(null, bus);
        },
        api: function(db, bus, callback) {
            callback(null, new API(config.api, db, bus));
        },
        answers: function(api, callback) {
            var argv = require('minimist')(process.argv);

            var inquirer = require('inquirer');

            inquirer.prompt([{
                'name': 'email',
                'type': 'string',
                'message': 'What is the email of the user?',
                'default': argv.email,
                'validate': function(value) {
                    return api.emails.isValidAddress(value);
                }
            }]).then(function(answers) {
                callback(null, answers);
            }, function(err) {
                callback(err || new Error());
            });
        },
        blacklist: function(answers, api, callback) {
            return api.emails.blacklist(answers.email)
                .catch(function (err) {
                    callback(err);
                });
        }
    }, function(err, results) {
        if (err) {
            console.error(err.toString());
            return process.exit(-1);
        }
        process.stdout.write(require('js-yaml').safeDump(results.newUser));

        return process.exit();
    });
